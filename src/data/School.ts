// To parse this data:
//
//   import { Convert } from "./file";
//
//   const school = Convert.toSchool(json);
//
// These functions will throw an error if the JSON doesn't
// match the expected interface, even if the JSON is valid.

export interface School {
    URN:                                 number;
    "LA (code)":                         number | string;
    "LA (name)":                         LaName;
    EstablishmentNumber?:                number;
    EstablishmentName:                   string;
    "TypeOfEstablishment (code)":        number;
    "TypeOfEstablishment (name)":        TypeOfEstablishmentName;
    "EstablishmentTypeGroup (code)":     number;
    "EstablishmentTypeGroup (name)":     EstablishmentTypeGroupName;
    "EstablishmentStatus (code)":        number;
    "EstablishmentStatus (name)":        EstablishmentStatusName;
    "PhaseOfEducation (code)"?:          number;
    "PhaseOfEducation (name)"?:          PhaseOfEducationName;
    StatutoryLowAge?:                    number;
    StatutoryHighAge?:                   number;
    "Boarders (code)"?:                  number;
    "Boarders (name)"?:                  BoardersName;
    "NurseryProvision (name)"?:          NurseryProvisionName;
    "OfficialSixthForm (code)"?:         number;
    "OfficialSixthForm (name)"?:         OfficialSixthFormName;
    "Gender (code)"?:                    number;
    "Gender (name)"?:                    GenderName;
    "ReligiousCharacter (code)"?:        number;
    "ReligiousCharacter (name)"?:        ReligiousName;
    "ReligiousEthos (name)"?:            ReligiousName;
    "Diocese (code)":                    DioceseCodeEnum | number;
    "Diocese (name)"?:                   DioceseName;
    SchoolCapacity?:                     number;
    "SpecialClasses (code)"?:            number;
    "SpecialClasses (name)"?:            SpecialClassesName;
    CensusDate?:                         CensusDate;
    NumberOfPupils?:                     number;
    NumberOfBoys?:                       number;
    NumberOfGirls?:                      number;
    PercentageFSM?:                      number | string;
    "FederationFlag (name)"?:            FederationFlagName;
    UKPRN?:                              number;
    OfstedLastInsp?:                     string;
    LastChangedDate:                     string;
    Street?:                             number | string;
    Locality?:                           number | string;
    Town?:                               string;
    Postcode?:                           number | string;
    SchoolWebsite?:                      string;
    TelephoneNum?:                       number;
    "HeadTitle (name)"?:                 HeadTitleName;
    HeadFirstName?:                      string;
    HeadLastName?:                       string;
    HeadPreferredJobTitle?:              string;
    "GOR (code)":                        GORCode;
    "GOR (name)":                        GORName;
    "DistrictAdministrative (code)":     number | string;
    "DistrictAdministrative (name)"?:    string;
    "AdministrativeWard (code)":         number | string;
    "AdministrativeWard (name)"?:        string;
    "ParliamentaryConstituency (code)":  number | string;
    "ParliamentaryConstituency (name)"?: string;
    "UrbanRural (code)":                 UrbanRuralCodeEnum | number;
    "UrbanRural (name)"?:                string;
    "GSSLACode (name)":                  GSSLACodeName;
    Easting?:                            number;
    Northing?:                           number;
    "MSOA (name)"?:                      string;
    "LSOA (name)"?:                      string;
    "PreviousLA (code)":                 number | string;
    "OfstedRating (name)"?:              OfstedRatingName;
    "RSCRegion (name)"?:                 RSCRegionName;
    UPRN?:                               number;
    "MSOA (code)":                       number | string;
    "LSOA (code)":                       number | string;
    FSM?:                                number;
    OpenDate?:                           string;
    "AdmissionsPolicy (code)"?:          number;
    "AdmissionsPolicy (name)"?:          AdmissionsPolicyName;
    "Section41Approved (name)"?:         Section41ApprovedName;
    "InspectorateName (name)"?:          InspectorateNameName;
    SENNoStat?:                          number;
    "BoardingEstablishment (name)"?:     BoardingEstablishmentName;
    PropsName?:                          string;
    CloseDate?:                          string;
    "TeenMoth (name)"?:                  TeenMothName;
    "CCF (name)"?:                       CCFName;
    "SENPRU (name)"?:                    SENPRUName;
    "EBD (name)"?:                       EBDName;
    PlacesPRU?:                          number;
    "FTProv (name)"?:                    FTProvName;
    "EdByOther (name)"?:                 EdByOtherName;
    "SEN1 (name)"?:                      SenName;
    "TypeOfResourcedProvision (name)"?:  TypeOfResourcedProvisionName;
    SenUnitOnRoll?:                      number;
    SenUnitCapacity?:                    number;
    "ReasonEstablishmentClosed (code)"?: number;
    "ReasonEstablishmentClosed (name)"?: ReasonEstablishmentClosedName;
    ResourcedProvisionOnRoll?:           number;
    ResourcedProvisionCapacity?:         number;
    "SEN2 (name)"?:                      SenName;
    "SEN3 (name)"?:                      SenName;
    "SEN4 (name)"?:                      SenName;
    "SEN5 (name)"?:                      SenName;
    "SEN6 (name)"?:                      SenName;
    "SEN7 (name)"?:                      SenName;
    "SEN8 (name)"?:                      SenName;
    "SEN9 (name)"?:                      SenName;
    "Country (name)"?:                   CountryName;
    "TrustSchoolFlag (code)"?:           number;
    "TrustSchoolFlag (name)"?:           TrustSchoolFlagName;
    SENStat?:                            number;
    Address3?:                           number | string;
    "County (name)"?:                    CountyName;
    "Federations (code)"?:               number | string;
    "Federations (name)"?:               string;
    "Trusts (code)"?:                    number;
    "Trusts (name)"?:                    string;
    "ReasonEstablishmentOpened (code)"?: number;
    "ReasonEstablishmentOpened (name)"?: ReasonEstablishmentOpenedName;
    "SEN10 (name)"?:                     SenName;
    "PreviousLA (name)"?:                LaName;
    PreviousEstablishmentNumber?:        number;
    "SEN11 (name)"?:                     SenName;
    "SEN12 (name)"?:                     SenName;
    TeenMothPlaces?:                     number;
    "SchoolSponsorFlag (name)"?:         SchoolSponsorFlagName;
    "SchoolSponsors (name)"?:            string;
    "FurtherEducationType (name)"?:      FurtherEducationTypeName;
    "SEN13 (name)"?:                     SenName;
    FEHEIdentifier?:                     number;
    "BSOInspectorateName (name)"?:       BSOInspectorateNameName;
    InspectorateReport?:                 string;
    DateOfLastInspectionVisit?:          string;
    SiteName?:                           string;
}

export enum AdmissionsPolicyName {
    NonSelective = "Non-selective",
    Selective = "Selective",
}

export enum BSOInspectorateNameName {
    CambridgeEducation = "Cambridge Education",
    EducationDevelopmentTrust = "Education Development Trust",
    IndependentSchoolsInspectorate = "Independent Schools Inspectorate",
    PentaInternational = "Penta International",
    SchoolInspectionService = "School Inspection Service",
}

export enum BoardersName {
    BoardingSchool = "Boarding school",
    ChildrenSHomeBoardingSchool = "Children's home (Boarding school)",
    CollegeFEResidentialAccommodation = "College / FE residential accommodation",
    NoBoarders = "No boarders",
}

export enum BoardingEstablishmentName {
    DoesNotHaveBoarders = "Does not have boarders",
    HasBoarders = "Has boarders",
}

export enum CCFName {
    DoesNotHaveChildCareFacilities = "Does not have child care facilities",
    HasChildCareFacilities = "Has child care facilities",
}

export enum CensusDate {
    The16012020 = "16-01-2020",
    The17012019 = "17-01-2019",
    The18012018 = "18-01-2018",
    The19012017 = "19-01-2017",
    The21012021 = "21-01-2021",
}

export enum CountryName {
    Jersey = "Jersey",
    Spain = "Spain",
    Tunisia = "Tunisia",
    UnitedKingdom = "United Kingdom",
}

export enum CountyName {
    Avon = "Avon",
    Bedfordshire = "Bedfordshire",
    Berkshire = "Berkshire",
    BlaenauGwent = "Blaenau Gwent",
    BridgendPenYBontArOgwr = "Bridgend (Pen-y-bont ar Ogwr)",
    Bristol = "Bristol",
    Buckinghamshire = "Buckinghamshire",
    CaerphillyCaerffili = "Caerphilly (Caerffili)",
    Cambridgeshire = "Cambridgeshire",
    CardiffCaerdydd = "Cardiff (Caerdydd)",
    CarmarthenshireSirGaerfyrddin = "Carmarthenshire (Sir Gaerfyrddin)",
    Ceredigion = "Ceredigion",
    ChannelIslands = "Channel Islands",
    Cheshire = "Cheshire",
    Cleveland = "Cleveland",
    Clwyd = "Clwyd",
    Conwy = "Conwy",
    Cornwall = "Cornwall",
    CountyDurham = "County Durham",
    Cumbria = "Cumbria",
    DenbighshireSirDdinbych = "Denbighshire (Sir Ddinbych)",
    Derbyshire = "Derbyshire",
    Devon = "Devon",
    Dorset = "Dorset",
    EastSussex = "East Sussex",
    EastYorkshire = "East Yorkshire",
    Essex = "Essex",
    FlintshireSirYFflint = "Flintshire (Sir y Fflint)",
    Gibraltar = "GIBRALTAR",
    Gloucestershire = "Gloucestershire",
    GreaterManchester = "Greater Manchester",
    Gwynedd = "Gwynedd",
    Hampshire = "Hampshire",
    Herefordshire = "Herefordshire",
    Hertfordshire = "Hertfordshire",
    IsleOfAngleseyYnysMon = "Isle of Anglesey (Ynys Mon)",
    IsleOfWight = "Isle of Wight",
    IslesOfScilly = "Isles of Scilly",
    Kent = "Kent",
    Lancashire = "Lancashire",
    Leicestershire = "Leicestershire",
    Lincolnshire = "Lincolnshire",
    Merseyside = "Merseyside",
    MerthyrTydfilMerthyrTudful = "Merthyr Tydfil (Merthyr Tudful)",
    Middlesex = "Middlesex",
    MonmouthshireSirFynwy = "Monmouthshire (Sir Fynwy)",
    NeathPortTalbotCastellNeddPorthTalbot = "Neath Port Talbot (Castell-nedd Porth Talbot)",
    NewportCasnewydd = "Newport (Casnewydd)",
    Norfolk = "Norfolk",
    NorthEastLincolnshire = "North East Lincolnshire",
    NorthLincolnshire = "North Lincolnshire",
    NorthYorkshire = "North Yorkshire",
    Northamptonshire = "Northamptonshire",
    Northumberland = "Northumberland",
    Nottinghamshire = "Nottinghamshire",
    Oxfordshire = "Oxfordshire",
    PembrokeshireSirBenfro = "Pembrokeshire (Sir Benfro)",
    Powys = "Powys",
    RhonddaCynonTaffRhonddaCynonTaf = "Rhondda Cynon Taff (Rhondda Cynon Taf)",
    Rutland = "Rutland",
    Shropshire = "Shropshire",
    Somerset = "Somerset",
    SouthGloucestershire = "South Gloucestershire",
    SouthYorkshire = "South Yorkshire",
    Spain = "SPAIN",
    Staffordshire = "Staffordshire",
    Suffolk = "Suffolk",
    Surrey = "Surrey",
    SwanseaAbertawe = "Swansea (Abertawe)",
    Teesside = "Teesside",
    TorfaenTorFaen = "Torfaen (Tor-faen)",
    TyneAndWear = "Tyne and Wear",
    ValeOfGlamorganBroMorgannwg = "Vale of Glamorgan (Bro Morgannwg)",
    Warwickshire = "Warwickshire",
    WestMidlands = "West Midlands",
    WestSussex = "West Sussex",
    WestYorkshire = "West Yorkshire",
    Wiltshire = "Wiltshire",
    Worcestershire = "Worcestershire",
    WrexhamWrecsam = "Wrexham (Wrecsam)",
}

export enum DioceseCodeEnum {
    Ce01 = "CE01",
    Ce02 = "CE02",
    Ce03 = "CE03",
    Ce04 = "CE04",
    Ce05 = "CE05",
    Ce06 = "CE06",
    Ce07 = "CE07",
    Ce08 = "CE08",
    Ce09 = "CE09",
    Ce10 = "CE10",
    Ce11 = "CE11",
    Ce12 = "CE12",
    Ce13 = "CE13",
    Ce14 = "CE14",
    Ce15 = "CE15",
    Ce16 = "CE16",
    Ce17 = "CE17",
    Ce18 = "CE18",
    Ce19 = "CE19",
    Ce20 = "CE20",
    Ce21 = "CE21",
    Ce22 = "CE22",
    Ce23 = "CE23",
    Ce24 = "CE24",
    Ce25 = "CE25",
    Ce26 = "CE26",
    Ce27 = "CE27",
    Ce28 = "CE28",
    Ce29 = "CE29",
    Ce30 = "CE30",
    Ce31 = "CE31",
    Ce32 = "CE32",
    Ce33 = "CE33",
    Ce34 = "CE34",
    Ce35 = "CE35",
    Ce36 = "CE36",
    Ce37 = "CE37",
    Ce38 = "CE38",
    Ce39 = "CE39",
    Ce40 = "CE40",
    Ce41 = "CE41",
    Ce42 = "CE42",
    Ce43 = "CE43",
    Jt01 = "JT01",
    Rc01 = "RC01",
    Rc02 = "RC02",
    Rc03 = "RC03",
    Rc04 = "RC04",
    Rc05 = "RC05",
    Rc06 = "RC06",
    Rc07 = "RC07",
    Rc08 = "RC08",
    Rc09 = "RC09",
    Rc10 = "RC10",
    Rc11 = "RC11",
    Rc12 = "RC12",
    Rc13 = "RC13",
    Rc14 = "RC14",
    Rc15 = "RC15",
    Rc16 = "RC16",
    Rc17 = "RC17",
    Rc18 = "RC18",
    Rc19 = "RC19",
    Rc20 = "RC20",
    The0000 = "0000",
}

export enum DioceseName {
    ArchdioceseOfBirmingham = "Archdiocese of Birmingham",
    ArchdioceseOfCardiff = "Archdiocese of Cardiff",
    ArchdioceseOfLiverpool = "Archdiocese of Liverpool",
    ArchdioceseOfSouthwark = "Archdiocese of Southwark",
    ArchdioceseOfWestminster = "Archdiocese of Westminster",
    DioceseIsNotTrustees = "Diocese is not trustees",
    DioceseOfArundelAndBrighton = "Diocese of Arundel and Brighton",
    DioceseOfBathAndWells = "Diocese of Bath and Wells",
    DioceseOfBirmingham = "Diocese of Birmingham",
    DioceseOfBlackburn = "Diocese of Blackburn",
    DioceseOfBradford = "Diocese of Bradford",
    DioceseOfBrentwood = "Diocese of Brentwood",
    DioceseOfBristol = "Diocese of Bristol",
    DioceseOfCanterbury = "Diocese of Canterbury",
    DioceseOfCarlisle = "Diocese of Carlisle",
    DioceseOfChelmsford = "Diocese of Chelmsford",
    DioceseOfChester = "Diocese of Chester",
    DioceseOfChichester = "Diocese of Chichester",
    DioceseOfClifton = "Diocese of Clifton",
    DioceseOfCoventry = "Diocese of Coventry",
    DioceseOfDerby = "Diocese of Derby",
    DioceseOfDurham = "Diocese of Durham",
    DioceseOfEastAnglia = "Diocese of East Anglia",
    DioceseOfEly = "Diocese of Ely",
    DioceseOfExeter = "Diocese of Exeter",
    DioceseOfGloucester = "Diocese of Gloucester",
    DioceseOfGuildford = "Diocese of Guildford",
    DioceseOfHallam = "Diocese of Hallam",
    DioceseOfHereford = "Diocese of Hereford",
    DioceseOfHexhamAndNewcastle = "Diocese of Hexham and Newcastle",
    DioceseOfLancaster = "Diocese of Lancaster",
    DioceseOfLeedsCe = "Diocese of Leeds (ce)",
    DioceseOfLeedsRC = "Diocese of Leeds (rc)",
    DioceseOfLeicester = "Diocese of Leicester",
    DioceseOfLichfield = "Diocese of Lichfield",
    DioceseOfLincoln = "Diocese of Lincoln",
    DioceseOfLiverpool = "Diocese of Liverpool",
    DioceseOfLondon = "Diocese of London",
    DioceseOfManchester = "Diocese of Manchester",
    DioceseOfMiddlesbrough = "Diocese of Middlesbrough",
    DioceseOfNewcastle = "Diocese of Newcastle",
    DioceseOfNorthampton = "Diocese of Northampton",
    DioceseOfNorwich = "Diocese of Norwich",
    DioceseOfNottingham = "Diocese of Nottingham",
    DioceseOfOxford = "Diocese of Oxford",
    DioceseOfPeterborough = "Diocese of Peterborough",
    DioceseOfPlymouth = "Diocese of Plymouth",
    DioceseOfPortsmouthCe = "Diocese of Portsmouth (ce)",
    DioceseOfPortsmouthRC = "Diocese of Portsmouth (rc)",
    DioceseOfRipon = "Diocese of Ripon",
    DioceseOfRochester = "Diocese of Rochester",
    DioceseOfSalford = "Diocese of Salford",
    DioceseOfSalisbury = "Diocese of Salisbury",
    DioceseOfSheffield = "Diocese of Sheffield",
    DioceseOfShrewsbury = "Diocese of Shrewsbury",
    DioceseOfShrewsburyDioceseOfChester = "Diocese of Shrewsbury/Diocese of Chester",
    DioceseOfSouthwark = "Diocese of Southwark",
    DioceseOfSouthwell = "Diocese of Southwell",
    DioceseOfStAlbans = "Diocese of St Albans",
    DioceseOfStEdmundsburyAndIpswich = "Diocese of St Edmundsbury and Ipswich",
    DioceseOfTruro = "Diocese of Truro",
    DioceseOfWakefield = "Diocese of Wakefield",
    DioceseOfWinchester = "Diocese of Winchester",
    DioceseOfWorcester = "Diocese of Worcester",
    DioceseOfYork = "Diocese of York",
}

export enum EBDName {
    PRUDoesHaveEBDProvision = "PRU Does have EBD provision",
    PRUDoesNotHaveEBDProvision = "PRU Does not have EBD provision",
}

export enum EdByOtherName {
    DoesNotOfferTuitionByAnotherProvider = "Does not offer tuition by another provider",
    PRUDoesOfferTuitionByAnotherProvider = "PRU does offer tuition by another provider",
}

export enum EstablishmentStatusName {
    Closed = "Closed",
    Open = "Open",
    OpenButProposedToClose = "Open, but proposed to close",
    ProposedToOpen = "Proposed to open",
}

export enum EstablishmentTypeGroupName {
    Academies = "Academies",
    Colleges = "Colleges",
    FreeSchools = "Free Schools",
    IndependentSchools = "Independent schools",
    LocalAuthorityMaintainedSchools = "Local authority maintained schools",
    OtherTypes = "Other types",
    SpecialSchools = "Special schools",
    Universities = "Universities",
    WelshSchools = "Welsh schools",
}

export enum FTProvName {
    DoesNotOfferFullTimeProvision = "Does not offer full time provision",
    PRUOffersFullTimeProvision = "PRU offers full time provision",
}

export enum FederationFlagName {
    NotUnderAFederation = "Not under a federation",
    SupportedByAFederation = "Supported by a federation",
}

export enum FurtherEducationTypeName {
    ArtDesignAndPerformingArtsCollege = "Art, Design and Performing Arts College",
    GeneralFurtherEducationCollege = "General Further Education College",
    LandBasedCollege = "Land-Based College",
    SixthFormCollegeGeneral = "Sixth Form College (General)",
    SixthFormCollegeVoluntaryAided = "Sixth Form College (Voluntary Aided)",
    SixthFormCollegeVoluntaryControlled = "Sixth Form College (Voluntary Controlled)",
    SpecialistDesignatedCollege = "Specialist Designated College",
    TertiaryCollege = "Tertiary College",
}

export enum GORCode {
    A = "A",
    B = "B",
    D = "D",
    E = "E",
    F = "F",
    G = "G",
    H = "H",
    J = "J",
    K = "K",
    W = "W",
    Z = "Z",
}

export enum GORName {
    EastMidlands = "East Midlands",
    EastOfEngland = "East of England",
    London = "London",
    NorthEast = "North East",
    NorthWest = "North West",
    NotApplicable = "Not Applicable",
    SouthEast = "South East",
    SouthWest = "South West",
    WalesPseudo = "Wales (pseudo)",
    WestMidlands = "West Midlands",
    YorkshireAndTheHumber = "Yorkshire and the Humber",
}

export enum GSSLACodeName {
    E06000001 = "E06000001",
    E06000002 = "E06000002",
    E06000003 = "E06000003",
    E06000004 = "E06000004",
    E06000005 = "E06000005",
    E06000006 = "E06000006",
    E06000007 = "E06000007",
    E06000008 = "E06000008",
    E06000009 = "E06000009",
    E06000010 = "E06000010",
    E06000011 = "E06000011",
    E06000012 = "E06000012",
    E06000013 = "E06000013",
    E06000014 = "E06000014",
    E06000015 = "E06000015",
    E06000016 = "E06000016",
    E06000017 = "E06000017",
    E06000018 = "E06000018",
    E06000019 = "E06000019",
    E06000020 = "E06000020",
    E06000021 = "E06000021",
    E06000022 = "E06000022",
    E06000023 = "E06000023",
    E06000024 = "E06000024",
    E06000025 = "E06000025",
    E06000026 = "E06000026",
    E06000027 = "E06000027",
    E06000028 = "E06000028",
    E06000029 = "E06000029",
    E06000030 = "E06000030",
    E06000031 = "E06000031",
    E06000032 = "E06000032",
    E06000033 = "E06000033",
    E06000034 = "E06000034",
    E06000035 = "E06000035",
    E06000036 = "E06000036",
    E06000037 = "E06000037",
    E06000038 = "E06000038",
    E06000039 = "E06000039",
    E06000040 = "E06000040",
    E06000041 = "E06000041",
    E06000042 = "E06000042",
    E06000043 = "E06000043",
    E06000044 = "E06000044",
    E06000045 = "E06000045",
    E06000046 = "E06000046",
    E06000047 = "E06000047",
    E06000049 = "E06000049",
    E06000050 = "E06000050",
    E06000051 = "E06000051",
    E06000052 = "E06000052",
    E06000053 = "E06000053",
    E06000054 = "E06000054",
    E06000055 = "E06000055",
    E06000056 = "E06000056",
    E06000057 = "E06000057",
    E06000058 = "E06000058",
    E06000059 = "E06000059",
    E06000060 = "E06000060",
    E06000061 = "E06000061",
    E06000062 = "E06000062",
    E08000001 = "E08000001",
    E08000002 = "E08000002",
    E08000003 = "E08000003",
    E08000004 = "E08000004",
    E08000005 = "E08000005",
    E08000006 = "E08000006",
    E08000007 = "E08000007",
    E08000008 = "E08000008",
    E08000009 = "E08000009",
    E08000010 = "E08000010",
    E08000011 = "E08000011",
    E08000012 = "E08000012",
    E08000013 = "E08000013",
    E08000014 = "E08000014",
    E08000015 = "E08000015",
    E08000016 = "E08000016",
    E08000017 = "E08000017",
    E08000018 = "E08000018",
    E08000019 = "E08000019",
    E08000021 = "E08000021",
    E08000022 = "E08000022",
    E08000023 = "E08000023",
    E08000024 = "E08000024",
    E08000025 = "E08000025",
    E08000026 = "E08000026",
    E08000027 = "E08000027",
    E08000028 = "E08000028",
    E08000029 = "E08000029",
    E08000030 = "E08000030",
    E08000031 = "E08000031",
    E08000032 = "E08000032",
    E08000033 = "E08000033",
    E08000034 = "E08000034",
    E08000035 = "E08000035",
    E08000036 = "E08000036",
    E08000037 = "E08000037",
    E09000001 = "E09000001",
    E09000002 = "E09000002",
    E09000003 = "E09000003",
    E09000004 = "E09000004",
    E09000005 = "E09000005",
    E09000006 = "E09000006",
    E09000007 = "E09000007",
    E09000008 = "E09000008",
    E09000009 = "E09000009",
    E09000010 = "E09000010",
    E09000011 = "E09000011",
    E09000012 = "E09000012",
    E09000013 = "E09000013",
    E09000014 = "E09000014",
    E09000015 = "E09000015",
    E09000016 = "E09000016",
    E09000017 = "E09000017",
    E09000018 = "E09000018",
    E09000019 = "E09000019",
    E09000020 = "E09000020",
    E09000021 = "E09000021",
    E09000022 = "E09000022",
    E09000023 = "E09000023",
    E09000024 = "E09000024",
    E09000025 = "E09000025",
    E09000026 = "E09000026",
    E09000027 = "E09000027",
    E09000028 = "E09000028",
    E09000029 = "E09000029",
    E09000030 = "E09000030",
    E09000031 = "E09000031",
    E09000032 = "E09000032",
    E09000033 = "E09000033",
    E10000003 = "E10000003",
    E10000006 = "E10000006",
    E10000007 = "E10000007",
    E10000008 = "E10000008",
    E10000009 = "E10000009",
    E10000011 = "E10000011",
    E10000012 = "E10000012",
    E10000013 = "E10000013",
    E10000014 = "E10000014",
    E10000015 = "E10000015",
    E10000016 = "E10000016",
    E10000017 = "E10000017",
    E10000018 = "E10000018",
    E10000019 = "E10000019",
    E10000020 = "E10000020",
    E10000021 = "E10000021",
    E10000023 = "E10000023",
    E10000024 = "E10000024",
    E10000025 = "E10000025",
    E10000027 = "E10000027",
    E10000028 = "E10000028",
    E10000029 = "E10000029",
    E10000030 = "E10000030",
    E10000031 = "E10000031",
    E10000032 = "E10000032",
    E10000034 = "E10000034",
    W06000001 = "W06000001",
    W06000002 = "W06000002",
    W06000003 = "W06000003",
    W06000004 = "W06000004",
    W06000005 = "W06000005",
    W06000006 = "W06000006",
    W06000008 = "W06000008",
    W06000009 = "W06000009",
    W06000010 = "W06000010",
    W06000011 = "W06000011",
    W06000012 = "W06000012",
    W06000013 = "W06000013",
    W06000014 = "W06000014",
    W06000015 = "W06000015",
    W06000016 = "W06000016",
    W06000018 = "W06000018",
    W06000019 = "W06000019",
    W06000020 = "W06000020",
    W06000021 = "W06000021",
    W06000022 = "W06000022",
    W06000023 = "W06000023",
    W06000024 = "W06000024",
    X999999 = "X999999",
}

export enum GenderName {
    Boys = "Boys",
    Girls = "Girls",
    Mixed = "Mixed",
}

export enum HeadTitleName {
    Canon = "Canon",
    CoHeadteacher = "Co Headteacher",
    DR = "Dr",
    Dame = "Dame",
    Dean = "Dean",
    Directors = "Directors",
    Doctor = "Doctor",
    Father = "Father",
    Headteacher = "Headteacher",
    Lady = "Lady",
    LtCol = "Lt Col",
    MS = "Ms",
    Manager = "Manager",
    Miss = "Miss",
    Mr = "Mr",
    Mrs = "Mrs",
    Mufti = "Mufti",
    Pastor = "Pastor",
    Principal = "Principal",
    Professor = "Professor",
    ProfessorSir = "Professor Sir",
    Proprietor = "Proprietor",
    Rabbi = "Rabbi",
    Rev = "Rev",
    Revd = "Revd",
    Reverend = "Reverend",
    RtHon = "Rt Hon",
    Sir = "Sir",
    Sister = "Sister",
    TheRevd = "The Revd",
    TheReverend = "The Reverend",
    WingCommander = "Wing Commander",
}

export enum InspectorateNameName {
    BridgeSchoolsInspectorate = "Bridge Schools' Inspectorate",
    Isi = "ISI",
    Ofsted = "Ofsted",
    Sis = "SIS",
}

export enum LaName {
    BFPOOverseasEstablishments = "BFPO Overseas Establishments",
    BarkingAndDagenham = "Barking and Dagenham",
    Barnet = "Barnet",
    Barnsley = "Barnsley",
    BathAndNorthEastSomerset = "Bath and North East Somerset",
    Bedford = "Bedford",
    Bexley = "Bexley",
    Birmingham = "Birmingham",
    BlackburnWithDarwen = "Blackburn with Darwen",
    Blackpool = "Blackpool",
    BlaenauGwent = "Blaenau Gwent",
    Bolton = "Bolton",
    BournemouthChristchurchAndPoole = "Bournemouth, Christchurch and Poole",
    BracknellForest = "Bracknell Forest",
    Bradford = "Bradford",
    Brent = "Brent",
    Bridgend = "Bridgend",
    BrightonAndHove = "Brighton and Hove",
    BristolCityOf = "Bristol, City of",
    BritishOverseasEstablishments = "British Overseas Establishments",
    Bromley = "Bromley",
    Buckinghamshire = "Buckinghamshire",
    Bury = "Bury",
    Caerphilly = "Caerphilly",
    Calderdale = "Calderdale",
    Cambridgeshire = "Cambridgeshire",
    Camden = "Camden",
    Cardiff = "Cardiff",
    Carmarthenshire = "Carmarthenshire",
    CentralBedfordshire = "Central Bedfordshire",
    Ceredigion = "Ceredigion",
    CheshireEast = "Cheshire East",
    CheshireWestAndChester = "Cheshire West and Chester",
    CityOfLondon = "City of London",
    Conwy = "Conwy",
    Cornwall = "Cornwall",
    CountyDurham = "County Durham",
    Coventry = "Coventry",
    Croydon = "Croydon",
    Cumbria = "Cumbria",
    Darlington = "Darlington",
    Denbighshire = "Denbighshire",
    Derby = "Derby",
    Derbyshire = "Derbyshire",
    Devon = "Devon",
    DoesNotApply = "Does not apply",
    Doncaster = "Doncaster",
    Dorset = "Dorset",
    Dudley = "Dudley",
    Ealing = "Ealing",
    EastRidingOfYorkshire = "East Riding of Yorkshire",
    EastSussex = "East Sussex",
    Enfield = "Enfield",
    Essex = "Essex",
    FieldworkOverseasEstablishments = "Fieldwork Overseas Establishments",
    Flintshire = "Flintshire",
    Gateshead = "Gateshead",
    GibraltarOverseasEstablishments = "Gibraltar Overseas Establishments",
    Gloucestershire = "Gloucestershire",
    Greenwich = "Greenwich",
    GuernseyOffshoreEstablishments = "Guernsey Offshore Establishments",
    Gwynedd = "Gwynedd",
    Hackney = "Hackney",
    Halton = "Halton",
    HammersmithAndFulham = "Hammersmith and Fulham",
    Hampshire = "Hampshire",
    Haringey = "Haringey",
    Harrow = "Harrow",
    Hartlepool = "Hartlepool",
    Havering = "Havering",
    HerefordshireCountyOf = "Herefordshire, County of",
    Hertfordshire = "Hertfordshire",
    Hillingdon = "Hillingdon",
    Hounslow = "Hounslow",
    IsleOfAnglesey = "Isle of Anglesey",
    IsleOfManOffshoreEstablishments = "Isle of Man Offshore Establishments",
    IsleOfWight = "Isle of Wight",
    IslesOfScilly = "Isles Of Scilly",
    Islington = "Islington",
    JerseyOffshoreEstablishments = "Jersey Offshore Establishments",
    KensingtonAndChelsea = "Kensington and Chelsea",
    Kent = "Kent",
    KingstonUponHullCityOf = "Kingston upon Hull, City of",
    KingstonUponThames = "Kingston upon Thames",
    Kirklees = "Kirklees",
    Knowsley = "Knowsley",
    Lambeth = "Lambeth",
    Lancashire = "Lancashire",
    Leeds = "Leeds",
    Leicester = "Leicester",
    Leicestershire = "Leicestershire",
    Lewisham = "Lewisham",
    Lincolnshire = "Lincolnshire",
    Liverpool = "Liverpool",
    Luton = "Luton",
    Manchester = "Manchester",
    Medway = "Medway",
    MerthyrTydfil = "Merthyr Tydfil",
    Merton = "Merton",
    Middlesbrough = "Middlesbrough",
    MiltonKeynes = "Milton Keynes",
    Monmouthshire = "Monmouthshire",
    NeathPortTalbot = "Neath Port Talbot",
    NewcastleUponTyne = "Newcastle upon Tyne",
    Newham = "Newham",
    Newport = "Newport",
    Norfolk = "Norfolk",
    NorthEastLincolnshire = "North East Lincolnshire",
    NorthLincolnshire = "North Lincolnshire",
    NorthNorthamptonshire = "North Northamptonshire",
    NorthSomerset = "North Somerset",
    NorthTyneside = "North Tyneside",
    NorthYorkshire = "North Yorkshire",
    Northumberland = "Northumberland",
    Nottingham = "Nottingham",
    Nottinghamshire = "Nottinghamshire",
    Oldham = "Oldham",
    Oxfordshire = "Oxfordshire",
    Pembrokeshire = "Pembrokeshire",
    Peterborough = "Peterborough",
    Plymouth = "Plymouth",
    Portsmouth = "Portsmouth",
    Powys = "Powys",
    PreLGR1996Avon = "Pre LGR (1996) Avon",
    PreLGR1996Cleveland = "Pre LGR (1996) Cleveland",
    PreLGR1996Humberside = "Pre LGR (1996) Humberside",
    PreLGR1996NorthYorkshire = "Pre LGR (1996) North Yorkshire",
    PreLGR1997Bedfordshire = "Pre LGR (1997) Bedfordshire",
    PreLGR1997Buckinghamshire = "Pre LGR (1997) Buckinghamshire",
    PreLGR1997Derbyshire = "Pre LGR (1997) Derbyshire",
    PreLGR1997Dorset = "Pre LGR (1997) Dorset",
    PreLGR1997Durham = "Pre LGR (1997) Durham",
    PreLGR1997EastSussex = "Pre LGR (1997) East Sussex",
    PreLGR1997Hampshire = "Pre LGR (1997) Hampshire",
    PreLGR1997Leicestershire = "Pre LGR (1997) Leicestershire",
    PreLGR1997Staffordshire = "Pre LGR (1997) Staffordshire",
    PreLGR1997Wiltshire = "Pre LGR (1997) Wiltshire",
    PreLGR1998Berkshire = "Pre LGR (1998) Berkshire",
    PreLGR1998Cambridgeshire = "Pre LGR (1998) Cambridgeshire",
    PreLGR1998Cheshire = "Pre LGR (1998) Cheshire",
    PreLGR1998Devon = "Pre LGR (1998) Devon",
    PreLGR1998Essex = "Pre LGR (1998) Essex",
    PreLGR1998HerefordWorcester = "Pre LGR (1998) Hereford & Worcester",
    PreLGR1998Kent = "Pre LGR (1998) Kent",
    PreLGR1998Lancashire = "Pre LGR (1998) Lancashire",
    PreLGR1998Nottinghamshire = "Pre LGR (1998) Nottinghamshire",
    PreLGR1998Shropshire = "Pre LGR (1998) Shropshire",
    PreLGR2009Bedfordshire = "Pre LGR (2009) Bedfordshire",
    PreLGR2009Cheshire = "Pre LGR (2009) Cheshire",
    PreLGR2019Bournemouth = "Pre-LGR 2019 Bournemouth",
    PreLGR2019Dorset = "Pre-LGR 2019 Dorset",
    PreLGR2019Poole = "Pre-LGR 2019 Poole",
    PreLGR2021Northamptonshire = "Pre-LGR 2021 Northamptonshire",
    Reading = "Reading",
    Redbridge = "Redbridge",
    RedcarAndCleveland = "Redcar and Cleveland",
    RhonddaCynonTaf = "Rhondda Cynon Taf",
    RichmondUponThames = "Richmond upon Thames",
    Rochdale = "Rochdale",
    Rotherham = "Rotherham",
    Rutland = "Rutland",
    Salford = "Salford",
    Sandwell = "Sandwell",
    ScotlandOffshoreEstablishments = "Scotland Offshore Establishments",
    Sefton = "Sefton",
    Sheffield = "Sheffield",
    Shropshire = "Shropshire",
    Slough = "Slough",
    Solihull = "Solihull",
    Somerset = "Somerset",
    SouthGloucestershire = "South Gloucestershire",
    SouthTyneside = "South Tyneside",
    Southampton = "Southampton",
    SouthendOnSea = "Southend-on-Sea",
    Southwark = "Southwark",
    StHelens = "St. Helens",
    Staffordshire = "Staffordshire",
    Stockport = "Stockport",
    StocktonOnTees = "Stockton-on-Tees",
    StokeOnTrent = "Stoke-on-Trent",
    Suffolk = "Suffolk",
    Sunderland = "Sunderland",
    Surrey = "Surrey",
    Sutton = "Sutton",
    Swansea = "Swansea",
    Swindon = "Swindon",
    Tameside = "Tameside",
    TelfordAndWrekin = "Telford and Wrekin",
    Thurrock = "Thurrock",
    Torbay = "Torbay",
    Torfaen = "Torfaen",
    TowerHamlets = "Tower Hamlets",
    Trafford = "Trafford",
    ValeOfGlamorgan = "Vale of Glamorgan",
    Wakefield = "Wakefield",
    Walsall = "Walsall",
    WalthamForest = "Waltham Forest",
    Wandsworth = "Wandsworth",
    Warrington = "Warrington",
    Warwickshire = "Warwickshire",
    WestBerkshire = "West Berkshire",
    WestNorthamptonshire = "West Northamptonshire",
    WestSussex = "West Sussex",
    Westminster = "Westminster",
    Wigan = "Wigan",
    Wiltshire = "Wiltshire",
    WindsorAndMaidenhead = "Windsor and Maidenhead",
    Wirral = "Wirral",
    Wokingham = "Wokingham",
    Wolverhampton = "Wolverhampton",
    Worcestershire = "Worcestershire",
    Wrexham = "Wrexham",
    York = "York",
}

export enum NurseryProvisionName {
    HasNurseryClasses = "Has Nursery Classes",
    NoNurseryClasses = "No Nursery Classes",
}

export enum OfficialSixthFormName {
    DoesNotHaveASixthForm = "Does not have a sixth form",
    HasASixthForm = "Has a sixth form",
}

export enum OfstedRatingName {
    Good = "Good",
    Inadequate = "Inadequate",
    InsufficientEvidence = "Insufficient evidence",
    Outstanding = "Outstanding",
    RequiresImprovement = "Requires improvement",
    SeriousWeaknesses = "Serious Weaknesses",
    SpecialMeasures = "Special Measures",
}

export enum PhaseOfEducationName {
    AllThrough = "All-through",
    MiddleDeemedPrimary = "Middle deemed primary",
    MiddleDeemedSecondary = "Middle deemed secondary",
    Nursery = "Nursery",
    Primary = "Primary",
    Secondary = "Secondary",
    The16Plus = "16 plus",
}

export enum RSCRegionName {
    EastMidlandsAndTheHumber = "East Midlands and the Humber",
    EastOfEnglandAndNorthEastLondon = "East of England and North-East London",
    LancashireAndWestYorkshire = "Lancashire and West Yorkshire",
    NorthOfEngland = "North of England",
    NorthWestLondonAndSouthCentralEngland = "North-West London and South-Central England",
    SouthEastEnglandAndSouthLondon = "South-East England and South London",
    SouthWestEngland = "South-West England",
    WestMidlands = "West Midlands",
}

export enum ReasonEstablishmentClosedName {
    AcademyConverter = "Academy Converter",
    AcademyFreeSchool = "Academy Free School",
    ChangeInStatus = "Change in status",
    ChangeReligiousCharacter = "Change Religious Character",
    CloseNurserySchool = "Close Nursery School",
    Closure = "Closure",
    CreatedInErrorApplicationRejected = "Created in Error - application rejected",
    DeRegistered = "De-registered",
    DoesNotMeetCriteriaForRegistration = "Does not meet criteria for registration",
    ForAcademy = "For Academy",
    FreshStart = "Fresh Start",
    ResultOfAmalgamationMerger = "Result of Amalgamation/Merger",
    TransferredToNewSponsor = "Transferred to new sponsor",
}

export enum ReasonEstablishmentOpenedName {
    AcademyConverter = "Academy Converter",
    AcademyFreeSchool = "Academy Free School",
    ChangeInStatus = "Change in status",
    ChangeReligiousCharacter = "Change Religious Character",
    FormerIndependent = "Former Independent",
    FreeSpecialSchool = "Free Special School",
    FreshStart = "Fresh Start",
    NewNurserySchool = "New Nursery School",
    NewProvision = "New Provision",
    NotRecorded = "Not Recorded",
    ResultOfAmalgamation = "Result of Amalgamation",
    ResultOfClosure = "Result of Closure",
    SplitSchool = "Split school",
}

export enum ReligiousName {
    Anglican = "Anglican",
    AnglicanChristian = "Anglican/Christian",
    AnglicanChurchOfEngland = "Anglican/Church of England",
    AnglicanEvangelical = "Anglican/Evangelical",
    Buddhist = "Buddhist",
    Catholic = "Catholic",
    CharadiJewish = "Charadi Jewish",
    Christian = "Christian",
    ChristianEvangelical = "Christian/Evangelical",
    ChristianMethodist = "Christian/Methodist",
    ChristianNonDenominational = "Christian/non-denominational",
    ChristianScience = "Christian Science",
    ChurchOfEngland = "Church of England",
    ChurchOfEnglandChristian = "Church of England/Christian",
    ChurchOfEnglandEvangelical = "Church of England/Evangelical",
    ChurchOfEnglandFreeChurch = "Church of England/Free Church",
    ChurchOfEnglandMethodist = "Church of England/Methodist",
    ChurchOfEnglandMethodistUnitedReformChurchBaptist = "Church of England/Methodist/United Reform Church/Baptist",
    ChurchOfEnglandRomanCatholic = "Church of England/Roman Catholic",
    ChurchOfEnglandUnitedReformedChurch = "Church of England/United Reformed Church",
    CongregationalChurch = "Congregational Church",
    DoesNotApply = "Does not apply",
    FreeChurch = "Free Church",
    GreekOrthodox = "Greek Orthodox",
    Hindu = "Hindu",
    InterNonDenominational = "Inter- / non- denominational",
    Islam = "Islam",
    Jewish = "Jewish",
    Methodist = "Methodist",
    MethodistChurchOfEngland = "Methodist/Church of England",
    Moravian = "Moravian",
    MultiFaith = "Multi-faith",
    Muslim = "Muslim",
    None = "None",
    OrthodoxJewish = "Orthodox Jewish",
    PlymouthBrethrenChristianChurch = "Plymouth Brethren Christian Church",
    Protestant = "Protestant",
    ProtestantEvangelical = "Protestant/Evangelical",
    Quaker = "Quaker",
    ReformedBaptist = "Reformed Baptist",
    RomanCatholic = "Roman Catholic",
    RomanCatholicAnglican = "Roman Catholic/Anglican",
    RomanCatholicChurchOfEngland = "Roman Catholic/Church of England",
    SeventhDayAdventist = "Seventh Day Adventist",
    Sikh = "Sikh",
    SunniDeobandi = "Sunni Deobandi",
    Unitarian = "Unitarian",
    UnitedReformedChurch = "United Reformed Church",
}

export enum SenName {
    ASDAutisticSpectrumDisorder = "ASD - Autistic Spectrum Disorder",
    HIHearingImpairment = "HI - Hearing Impairment",
    MLDModerateLearningDifficulty = "MLD - Moderate Learning Difficulty",
    MSIMultiSensoryImpairment = "MSI - Multi-Sensory Impairment",
    NotApplicable = "Not Applicable",
    OTHOtherDifficultyDisability = "OTH - Other Difficulty/Disability",
    PDPhysicalDisability = "PD - Physical Disability",
    PMLDProfoundAndMultipleLearningDifficulty = "PMLD - Profound and Multiple Learning Difficulty",
    SEMHSocialEmotionalAndMentalHealth = "SEMH - Social, Emotional and Mental Health",
    SLCNSpeechLanguageAndCommunication = "SLCN - Speech, language and Communication",
    SLDSevereLearningDifficulty = "SLD - Severe Learning Difficulty",
    SPLDSpecificLearningDifficulty = "SpLD - Specific Learning Difficulty",
    VIVisualImpairment = "VI - Visual Impairment",
}

export enum SENPRUName {
    PRUDoesHaveProvisionForSEN = "PRU Does have Provision for SEN",
    PRUDoesNotHaveProvisionForSEN = "PRU Does not have Provision for SEN",
}

export enum SchoolSponsorFlagName {
    Empty = "-",
    LinkedToASponsor = "Linked to a sponsor",
}

export enum Section41ApprovedName {
    Approved = "Approved",
    NotApproved = "Not approved",
}

export enum SpecialClassesName {
    HasSpecialClasses = "Has Special Classes",
    NoSpecialClasses = "No Special Classes",
}

export enum TeenMothName {
    DoesNotProvidePlacesForTeenMothers = "Does not provide places for Teen Mothers",
    ProvidesPlacesForTeenMothers = "Provides places for Teen Mothers",
}

export enum TrustSchoolFlagName {
    NotSupportedByATrust = "Not supported by a trust",
    SupportedByAMultiAcademyTrust = "Supported by a multi-academy trust",
    SupportedByASingleAcademyTrust = "Supported by a single-academy trust",
    SupportedByATrust = "Supported by a trust",
}

export enum TypeOfEstablishmentName {
    Academy1619Converter = "Academy 16-19 converter",
    Academy16To19SponsorLED = "Academy 16 to 19 sponsor led",
    AcademyAlternativeProvisionConverter = "Academy alternative provision converter",
    AcademyAlternativeProvisionSponsorLED = "Academy alternative provision sponsor led",
    AcademyConverter = "Academy converter",
    AcademySpecialConverter = "Academy special converter",
    AcademySpecialSponsorLED = "Academy special sponsor led",
    AcademySponsorLED = "Academy sponsor led",
    BritishSchoolsOverseas = "British schools overseas",
    CityTechnologyCollege = "City technology college",
    CommunitySchool = "Community school",
    CommunitySpecialSchool = "Community special school",
    FoundationSchool = "Foundation school",
    FoundationSpecialSchool = "Foundation special school",
    FreeSchools = "Free schools",
    FreeSchools16To19 = "Free schools 16 to 19",
    FreeSchoolsAlternativeProvision = "Free schools alternative provision",
    FreeSchoolsSpecial = "Free schools special",
    FurtherEducation = "Further education",
    HigherEducationInstitutions = "Higher education institutions",
    InstitutionFundedByOtherGovernmentDepartment = "Institution funded by other government department",
    LocalAuthorityNurserySchool = "Local authority nursery school",
    Miscellaneous = "Miscellaneous",
    NonMaintainedSpecialSchool = "Non-maintained special school",
    OffshoreSchools = "Offshore schools",
    OtherIndependentSchool = "Other independent school",
    OtherIndependentSpecialSchool = "Other independent special school",
    PupilReferralUnit = "Pupil referral unit",
    SecureUnits = "Secure units",
    ServiceChildrenSEducation = "Service children's education",
    SixthFormCentres = "Sixth form centres",
    SpecialPost16Institution = "Special post 16 institution",
    StudioSchools = "Studio schools",
    UniversityTechnicalCollege = "University technical college",
    VoluntaryAidedSchool = "Voluntary aided school",
    VoluntaryControlledSchool = "Voluntary controlled school",
    WelshEstablishment = "Welsh establishment",
}

export enum TypeOfResourcedProvisionName {
    ResourcedProvision = "Resourced provision",
    ResourcedProvisionAndSENUnit = "Resourced provision and SEN unit",
    SENUnit = "SEN unit",
}

export enum UrbanRuralCodeEnum {
    A1 = "A1",
    B1 = "B1",
    C1 = "C1",
    C2 = "C2",
    D1 = "D1",
    D2 = "D2",
    E1 = "E1",
    E2 = "E2",
    F1 = "F1",
    F2 = "F2",
    Z9 = "Z9",
}

// Converts JSON strings to/from your types
// and asserts the results of JSON.parse at runtime
export class Convert {
    public static toSchool(json: string): School[] {
        return cast(JSON.parse(json), a(r("School")));
    }

    public static schoolToJson(value: School[]): string {
        return JSON.stringify(uncast(value, a(r("School"))), null, 2);
    }
}

function invalidValue(typ: any, val: any, key: any = ''): never {
    if (key) {
        throw Error(`Invalid value for key "${key}". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`);
    }
    throw Error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`, );
}

function jsonToJSProps(typ: any): any {
    if (typ.jsonToJS === undefined) {
        const map: any = {};
        typ.props.forEach((p: any) => map[p.json] = { key: p.js, typ: p.typ });
        typ.jsonToJS = map;
    }
    return typ.jsonToJS;
}

function jsToJSONProps(typ: any): any {
    if (typ.jsToJSON === undefined) {
        const map: any = {};
        typ.props.forEach((p: any) => map[p.js] = { key: p.json, typ: p.typ });
        typ.jsToJSON = map;
    }
    return typ.jsToJSON;
}

function transform(val: any, typ: any, getProps: any, key: any = ''): any {
    function transformPrimitive(typ: string, val: any): any {
        if (typeof typ === typeof val) return val;
        return invalidValue(typ, val, key);
    }

    function transformUnion(typs: any[], val: any): any {
        // val must validate against one typ in typs
        const l = typs.length;
        for (let i = 0; i < l; i++) {
            const typ = typs[i];
            try {
                return transform(val, typ, getProps);
            } catch (_) {}
        }
        return invalidValue(typs, val);
    }

    function transformEnum(cases: string[], val: any): any {
        if (cases.indexOf(val) !== -1) return val;
        return invalidValue(cases, val);
    }

    function transformArray(typ: any, val: any): any {
        // val must be an array with no invalid elements
        if (!Array.isArray(val)) return invalidValue("array", val);
        return val.map(el => transform(el, typ, getProps));
    }

    function transformDate(val: any): any {
        if (val === null) {
            return null;
        }
        const d = new Date(val);
        if (isNaN(d.valueOf())) {
            return invalidValue("Date", val);
        }
        return d;
    }

    function transformObject(props: { [k: string]: any }, additional: any, val: any): any {
        if (val === null || typeof val !== "object" || Array.isArray(val)) {
            return invalidValue("object", val);
        }
        const result: any = {};
        Object.getOwnPropertyNames(props).forEach(key => {
            const prop = props[key];
            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;
            result[prop.key] = transform(v, prop.typ, getProps, prop.key);
        });
        Object.getOwnPropertyNames(val).forEach(key => {
            if (!Object.prototype.hasOwnProperty.call(props, key)) {
                result[key] = transform(val[key], additional, getProps, key);
            }
        });
        return result;
    }

    if (typ === "any") return val;
    if (typ === null) {
        if (val === null) return val;
        return invalidValue(typ, val);
    }
    if (typ === false) return invalidValue(typ, val);
    while (typeof typ === "object" && typ.ref !== undefined) {
        typ = typeMap[typ.ref];
    }
    if (Array.isArray(typ)) return transformEnum(typ, val);
    if (typeof typ === "object") {
        return typ.hasOwnProperty("unionMembers") ? transformUnion(typ.unionMembers, val)
            : typ.hasOwnProperty("arrayItems")    ? transformArray(typ.arrayItems, val)
            : typ.hasOwnProperty("props")         ? transformObject(getProps(typ), typ.additional, val)
            : invalidValue(typ, val);
    }
    // Numbers can be parsed by Date but shouldn't be.
    if (typ === Date && typeof val !== "number") return transformDate(val);
    return transformPrimitive(typ, val);
}

function cast<T>(val: any, typ: any): T {
    return transform(val, typ, jsonToJSProps);
}

function uncast<T>(val: T, typ: any): any {
    return transform(val, typ, jsToJSONProps);
}

function a(typ: any) {
    return { arrayItems: typ };
}

function u(...typs: any[]) {
    return { unionMembers: typs };
}

function o(props: any[], additional: any) {
    return { props, additional };
}

function m(additional: any) {
    return { props: [], additional };
}

function r(name: string) {
    return { ref: name };
}

const typeMap: any = {
    "School": o([
        { json: "URN", js: "URN", typ: 0 },
        { json: "LA (code)", js: "LA (code)", typ: u(0, "") },
        { json: "LA (name)", js: "LA (name)", typ: r("LaName") },
        { json: "EstablishmentNumber", js: "EstablishmentNumber", typ: u(undefined, 0) },
        { json: "EstablishmentName", js: "EstablishmentName", typ: "" },
        { json: "TypeOfEstablishment (code)", js: "TypeOfEstablishment (code)", typ: 0 },
        { json: "TypeOfEstablishment (name)", js: "TypeOfEstablishment (name)", typ: r("TypeOfEstablishmentName") },
        { json: "EstablishmentTypeGroup (code)", js: "EstablishmentTypeGroup (code)", typ: 0 },
        { json: "EstablishmentTypeGroup (name)", js: "EstablishmentTypeGroup (name)", typ: r("EstablishmentTypeGroupName") },
        { json: "EstablishmentStatus (code)", js: "EstablishmentStatus (code)", typ: 0 },
        { json: "EstablishmentStatus (name)", js: "EstablishmentStatus (name)", typ: r("EstablishmentStatusName") },
        { json: "PhaseOfEducation (code)", js: "PhaseOfEducation (code)", typ: u(undefined, 0) },
        { json: "PhaseOfEducation (name)", js: "PhaseOfEducation (name)", typ: u(undefined, r("PhaseOfEducationName")) },
        { json: "StatutoryLowAge", js: "StatutoryLowAge", typ: u(undefined, 0) },
        { json: "StatutoryHighAge", js: "StatutoryHighAge", typ: u(undefined, 0) },
        { json: "Boarders (code)", js: "Boarders (code)", typ: u(undefined, 0) },
        { json: "Boarders (name)", js: "Boarders (name)", typ: u(undefined, r("BoardersName")) },
        { json: "NurseryProvision (name)", js: "NurseryProvision (name)", typ: u(undefined, r("NurseryProvisionName")) },
        { json: "OfficialSixthForm (code)", js: "OfficialSixthForm (code)", typ: u(undefined, 0) },
        { json: "OfficialSixthForm (name)", js: "OfficialSixthForm (name)", typ: u(undefined, r("OfficialSixthFormName")) },
        { json: "Gender (code)", js: "Gender (code)", typ: u(undefined, 0) },
        { json: "Gender (name)", js: "Gender (name)", typ: u(undefined, r("GenderName")) },
        { json: "ReligiousCharacter (code)", js: "ReligiousCharacter (code)", typ: u(undefined, 0) },
        { json: "ReligiousCharacter (name)", js: "ReligiousCharacter (name)", typ: u(undefined, r("ReligiousName")) },
        { json: "ReligiousEthos (name)", js: "ReligiousEthos (name)", typ: u(undefined, r("ReligiousName")) },
        { json: "Diocese (code)", js: "Diocese (code)", typ: u(r("DioceseCodeEnum"), 0) },
        { json: "Diocese (name)", js: "Diocese (name)", typ: u(undefined, r("DioceseName")) },
        { json: "SchoolCapacity", js: "SchoolCapacity", typ: u(undefined, 0) },
        { json: "SpecialClasses (code)", js: "SpecialClasses (code)", typ: u(undefined, 0) },
        { json: "SpecialClasses (name)", js: "SpecialClasses (name)", typ: u(undefined, r("SpecialClassesName")) },
        { json: "CensusDate", js: "CensusDate", typ: u(undefined, r("CensusDate")) },
        { json: "NumberOfPupils", js: "NumberOfPupils", typ: u(undefined, 0) },
        { json: "NumberOfBoys", js: "NumberOfBoys", typ: u(undefined, 0) },
        { json: "NumberOfGirls", js: "NumberOfGirls", typ: u(undefined, 0) },
        { json: "PercentageFSM", js: "PercentageFSM", typ: u(undefined, u(3.14, "")) },
        { json: "FederationFlag (name)", js: "FederationFlag (name)", typ: u(undefined, r("FederationFlagName")) },
        { json: "UKPRN", js: "UKPRN", typ: u(undefined, 0) },
        { json: "OfstedLastInsp", js: "OfstedLastInsp", typ: u(undefined, "") },
        { json: "LastChangedDate", js: "LastChangedDate", typ: "" },
        { json: "Street", js: "Street", typ: u(undefined, u(0, "")) },
        { json: "Locality", js: "Locality", typ: u(undefined, u(0, "")) },
        { json: "Town", js: "Town", typ: u(undefined, "") },
        { json: "Postcode", js: "Postcode", typ: u(undefined, u(0, "")) },
        { json: "SchoolWebsite", js: "SchoolWebsite", typ: u(undefined, "") },
        { json: "TelephoneNum", js: "TelephoneNum", typ: u(undefined, 0) },
        { json: "HeadTitle (name)", js: "HeadTitle (name)", typ: u(undefined, r("HeadTitleName")) },
        { json: "HeadFirstName", js: "HeadFirstName", typ: u(undefined, "") },
        { json: "HeadLastName", js: "HeadLastName", typ: u(undefined, "") },
        { json: "HeadPreferredJobTitle", js: "HeadPreferredJobTitle", typ: u(undefined, "") },
        { json: "GOR (code)", js: "GOR (code)", typ: r("GORCode") },
        { json: "GOR (name)", js: "GOR (name)", typ: r("GORName") },
        { json: "DistrictAdministrative (code)", js: "DistrictAdministrative (code)", typ: u(0, "") },
        { json: "DistrictAdministrative (name)", js: "DistrictAdministrative (name)", typ: u(undefined, "") },
        { json: "AdministrativeWard (code)", js: "AdministrativeWard (code)", typ: u(0, "") },
        { json: "AdministrativeWard (name)", js: "AdministrativeWard (name)", typ: u(undefined, "") },
        { json: "ParliamentaryConstituency (code)", js: "ParliamentaryConstituency (code)", typ: u(0, "") },
        { json: "ParliamentaryConstituency (name)", js: "ParliamentaryConstituency (name)", typ: u(undefined, "") },
        { json: "UrbanRural (code)", js: "UrbanRural (code)", typ: u(r("UrbanRuralCodeEnum"), 0) },
        { json: "UrbanRural (name)", js: "UrbanRural (name)", typ: u(undefined, "") },
        { json: "GSSLACode (name)", js: "GSSLACode (name)", typ: r("GSSLACodeName") },
        { json: "Easting", js: "Easting", typ: u(undefined, 0) },
        { json: "Northing", js: "Northing", typ: u(undefined, 0) },
        { json: "MSOA (name)", js: "MSOA (name)", typ: u(undefined, "") },
        { json: "LSOA (name)", js: "LSOA (name)", typ: u(undefined, "") },
        { json: "PreviousLA (code)", js: "PreviousLA (code)", typ: u(0, "") },
        { json: "OfstedRating (name)", js: "OfstedRating (name)", typ: u(undefined, r("OfstedRatingName")) },
        { json: "RSCRegion (name)", js: "RSCRegion (name)", typ: u(undefined, r("RSCRegionName")) },
        { json: "UPRN", js: "UPRN", typ: u(undefined, 0) },
        { json: "MSOA (code)", js: "MSOA (code)", typ: u(0, "") },
        { json: "LSOA (code)", js: "LSOA (code)", typ: u(0, "") },
        { json: "FSM", js: "FSM", typ: u(undefined, 0) },
        { json: "OpenDate", js: "OpenDate", typ: u(undefined, "") },
        { json: "AdmissionsPolicy (code)", js: "AdmissionsPolicy (code)", typ: u(undefined, 0) },
        { json: "AdmissionsPolicy (name)", js: "AdmissionsPolicy (name)", typ: u(undefined, r("AdmissionsPolicyName")) },
        { json: "Section41Approved (name)", js: "Section41Approved (name)", typ: u(undefined, r("Section41ApprovedName")) },
        { json: "InspectorateName (name)", js: "InspectorateName (name)", typ: u(undefined, r("InspectorateNameName")) },
        { json: "SENNoStat", js: "SENNoStat", typ: u(undefined, 0) },
        { json: "BoardingEstablishment (name)", js: "BoardingEstablishment (name)", typ: u(undefined, r("BoardingEstablishmentName")) },
        { json: "PropsName", js: "PropsName", typ: u(undefined, "") },
        { json: "CloseDate", js: "CloseDate", typ: u(undefined, "") },
        { json: "TeenMoth (name)", js: "TeenMoth (name)", typ: u(undefined, r("TeenMothName")) },
        { json: "CCF (name)", js: "CCF (name)", typ: u(undefined, r("CCFName")) },
        { json: "SENPRU (name)", js: "SENPRU (name)", typ: u(undefined, r("SENPRUName")) },
        { json: "EBD (name)", js: "EBD (name)", typ: u(undefined, r("EBDName")) },
        { json: "PlacesPRU", js: "PlacesPRU", typ: u(undefined, 0) },
        { json: "FTProv (name)", js: "FTProv (name)", typ: u(undefined, r("FTProvName")) },
        { json: "EdByOther (name)", js: "EdByOther (name)", typ: u(undefined, r("EdByOtherName")) },
        { json: "SEN1 (name)", js: "SEN1 (name)", typ: u(undefined, r("SenName")) },
        { json: "TypeOfResourcedProvision (name)", js: "TypeOfResourcedProvision (name)", typ: u(undefined, r("TypeOfResourcedProvisionName")) },
        { json: "SenUnitOnRoll", js: "SenUnitOnRoll", typ: u(undefined, 0) },
        { json: "SenUnitCapacity", js: "SenUnitCapacity", typ: u(undefined, 0) },
        { json: "ReasonEstablishmentClosed (code)", js: "ReasonEstablishmentClosed (code)", typ: u(undefined, 0) },
        { json: "ReasonEstablishmentClosed (name)", js: "ReasonEstablishmentClosed (name)", typ: u(undefined, r("ReasonEstablishmentClosedName")) },
        { json: "ResourcedProvisionOnRoll", js: "ResourcedProvisionOnRoll", typ: u(undefined, 0) },
        { json: "ResourcedProvisionCapacity", js: "ResourcedProvisionCapacity", typ: u(undefined, 0) },
        { json: "SEN2 (name)", js: "SEN2 (name)", typ: u(undefined, r("SenName")) },
        { json: "SEN3 (name)", js: "SEN3 (name)", typ: u(undefined, r("SenName")) },
        { json: "SEN4 (name)", js: "SEN4 (name)", typ: u(undefined, r("SenName")) },
        { json: "SEN5 (name)", js: "SEN5 (name)", typ: u(undefined, r("SenName")) },
        { json: "SEN6 (name)", js: "SEN6 (name)", typ: u(undefined, r("SenName")) },
        { json: "SEN7 (name)", js: "SEN7 (name)", typ: u(undefined, r("SenName")) },
        { json: "SEN8 (name)", js: "SEN8 (name)", typ: u(undefined, r("SenName")) },
        { json: "SEN9 (name)", js: "SEN9 (name)", typ: u(undefined, r("SenName")) },
        { json: "Country (name)", js: "Country (name)", typ: u(undefined, r("CountryName")) },
        { json: "TrustSchoolFlag (code)", js: "TrustSchoolFlag (code)", typ: u(undefined, 0) },
        { json: "TrustSchoolFlag (name)", js: "TrustSchoolFlag (name)", typ: u(undefined, r("TrustSchoolFlagName")) },
        { json: "SENStat", js: "SENStat", typ: u(undefined, 0) },
        { json: "Address3", js: "Address3", typ: u(undefined, u(0, "")) },
        { json: "County (name)", js: "County (name)", typ: u(undefined, r("CountyName")) },
        { json: "Federations (code)", js: "Federations (code)", typ: u(undefined, u(0, "")) },
        { json: "Federations (name)", js: "Federations (name)", typ: u(undefined, "") },
        { json: "Trusts (code)", js: "Trusts (code)", typ: u(undefined, 0) },
        { json: "Trusts (name)", js: "Trusts (name)", typ: u(undefined, "") },
        { json: "ReasonEstablishmentOpened (code)", js: "ReasonEstablishmentOpened (code)", typ: u(undefined, 0) },
        { json: "ReasonEstablishmentOpened (name)", js: "ReasonEstablishmentOpened (name)", typ: u(undefined, r("ReasonEstablishmentOpenedName")) },
        { json: "SEN10 (name)", js: "SEN10 (name)", typ: u(undefined, r("SenName")) },
        { json: "PreviousLA (name)", js: "PreviousLA (name)", typ: u(undefined, r("LaName")) },
        { json: "PreviousEstablishmentNumber", js: "PreviousEstablishmentNumber", typ: u(undefined, 0) },
        { json: "SEN11 (name)", js: "SEN11 (name)", typ: u(undefined, r("SenName")) },
        { json: "SEN12 (name)", js: "SEN12 (name)", typ: u(undefined, r("SenName")) },
        { json: "TeenMothPlaces", js: "TeenMothPlaces", typ: u(undefined, 0) },
        { json: "SchoolSponsorFlag (name)", js: "SchoolSponsorFlag (name)", typ: u(undefined, r("SchoolSponsorFlagName")) },
        { json: "SchoolSponsors (name)", js: "SchoolSponsors (name)", typ: u(undefined, "") },
        { json: "FurtherEducationType (name)", js: "FurtherEducationType (name)", typ: u(undefined, r("FurtherEducationTypeName")) },
        { json: "SEN13 (name)", js: "SEN13 (name)", typ: u(undefined, r("SenName")) },
        { json: "FEHEIdentifier", js: "FEHEIdentifier", typ: u(undefined, 0) },
        { json: "BSOInspectorateName (name)", js: "BSOInspectorateName (name)", typ: u(undefined, r("BSOInspectorateNameName")) },
        { json: "InspectorateReport", js: "InspectorateReport", typ: u(undefined, "") },
        { json: "DateOfLastInspectionVisit", js: "DateOfLastInspectionVisit", typ: u(undefined, "") },
        { json: "SiteName", js: "SiteName", typ: u(undefined, "") },
    ], false),
    "AdmissionsPolicyName": [
        "Non-selective",
        "Selective",
    ],
    "BSOInspectorateNameName": [
        "Cambridge Education",
        "Education Development Trust",
        "Independent Schools Inspectorate",
        "Penta International",
        "School Inspection Service",
    ],
    "BoardersName": [
        "Boarding school",
        "Children's home (Boarding school)",
        "College / FE residential accommodation",
        "No boarders",
    ],
    "BoardingEstablishmentName": [
        "Does not have boarders",
        "Has boarders",
    ],
    "CCFName": [
        "Does not have child care facilities",
        "Has child care facilities",
    ],
    "CensusDate": [
        "16-01-2020",
        "17-01-2019",
        "18-01-2018",
        "19-01-2017",
        "21-01-2021",
    ],
    "CountryName": [
        "Jersey",
        "Spain",
        "Tunisia",
        "United Kingdom",
    ],
    "CountyName": [
        "Avon",
        "Bedfordshire",
        "Berkshire",
        "Blaenau Gwent",
        "Bridgend (Pen-y-bont ar Ogwr)",
        "Bristol",
        "Buckinghamshire",
        "Caerphilly (Caerffili)",
        "Cambridgeshire",
        "Cardiff (Caerdydd)",
        "Carmarthenshire (Sir Gaerfyrddin)",
        "Ceredigion",
        "Channel Islands",
        "Cheshire",
        "Cleveland",
        "Clwyd",
        "Conwy",
        "Cornwall",
        "County Durham",
        "Cumbria",
        "Denbighshire (Sir Ddinbych)",
        "Derbyshire",
        "Devon",
        "Dorset",
        "East Sussex",
        "East Yorkshire",
        "Essex",
        "Flintshire (Sir y Fflint)",
        "GIBRALTAR",
        "Gloucestershire",
        "Greater Manchester",
        "Gwynedd",
        "Hampshire",
        "Herefordshire",
        "Hertfordshire",
        "Isle of Anglesey (Ynys Mon)",
        "Isle of Wight",
        "Isles of Scilly",
        "Kent",
        "Lancashire",
        "Leicestershire",
        "Lincolnshire",
        "Merseyside",
        "Merthyr Tydfil (Merthyr Tudful)",
        "Middlesex",
        "Monmouthshire (Sir Fynwy)",
        "Neath Port Talbot (Castell-nedd Porth Talbot)",
        "Newport (Casnewydd)",
        "Norfolk",
        "North East Lincolnshire",
        "North Lincolnshire",
        "North Yorkshire",
        "Northamptonshire",
        "Northumberland",
        "Nottinghamshire",
        "Oxfordshire",
        "Pembrokeshire (Sir Benfro)",
        "Powys",
        "Rhondda Cynon Taff (Rhondda Cynon Taf)",
        "Rutland",
        "Shropshire",
        "Somerset",
        "South Gloucestershire",
        "South Yorkshire",
        "SPAIN",
        "Staffordshire",
        "Suffolk",
        "Surrey",
        "Swansea (Abertawe)",
        "Teesside",
        "Torfaen (Tor-faen)",
        "Tyne and Wear",
        "Vale of Glamorgan (Bro Morgannwg)",
        "Warwickshire",
        "West Midlands",
        "West Sussex",
        "West Yorkshire",
        "Wiltshire",
        "Worcestershire",
        "Wrexham (Wrecsam)",
    ],
    "DioceseCodeEnum": [
        "CE01",
        "CE02",
        "CE03",
        "CE04",
        "CE05",
        "CE06",
        "CE07",
        "CE08",
        "CE09",
        "CE10",
        "CE11",
        "CE12",
        "CE13",
        "CE14",
        "CE15",
        "CE16",
        "CE17",
        "CE18",
        "CE19",
        "CE20",
        "CE21",
        "CE22",
        "CE23",
        "CE24",
        "CE25",
        "CE26",
        "CE27",
        "CE28",
        "CE29",
        "CE30",
        "CE31",
        "CE32",
        "CE33",
        "CE34",
        "CE35",
        "CE36",
        "CE37",
        "CE38",
        "CE39",
        "CE40",
        "CE41",
        "CE42",
        "CE43",
        "JT01",
        "RC01",
        "RC02",
        "RC03",
        "RC04",
        "RC05",
        "RC06",
        "RC07",
        "RC08",
        "RC09",
        "RC10",
        "RC11",
        "RC12",
        "RC13",
        "RC14",
        "RC15",
        "RC16",
        "RC17",
        "RC18",
        "RC19",
        "RC20",
        "0000",
    ],
    "DioceseName": [
        "Archdiocese of Birmingham",
        "Archdiocese of Cardiff",
        "Archdiocese of Liverpool",
        "Archdiocese of Southwark",
        "Archdiocese of Westminster",
        "Diocese is not trustees",
        "Diocese of Arundel and Brighton",
        "Diocese of Bath and Wells",
        "Diocese of Birmingham",
        "Diocese of Blackburn",
        "Diocese of Bradford",
        "Diocese of Brentwood",
        "Diocese of Bristol",
        "Diocese of Canterbury",
        "Diocese of Carlisle",
        "Diocese of Chelmsford",
        "Diocese of Chester",
        "Diocese of Chichester",
        "Diocese of Clifton",
        "Diocese of Coventry",
        "Diocese of Derby",
        "Diocese of Durham",
        "Diocese of East Anglia",
        "Diocese of Ely",
        "Diocese of Exeter",
        "Diocese of Gloucester",
        "Diocese of Guildford",
        "Diocese of Hallam",
        "Diocese of Hereford",
        "Diocese of Hexham and Newcastle",
        "Diocese of Lancaster",
        "Diocese of Leeds (ce)",
        "Diocese of Leeds (rc)",
        "Diocese of Leicester",
        "Diocese of Lichfield",
        "Diocese of Lincoln",
        "Diocese of Liverpool",
        "Diocese of London",
        "Diocese of Manchester",
        "Diocese of Middlesbrough",
        "Diocese of Newcastle",
        "Diocese of Northampton",
        "Diocese of Norwich",
        "Diocese of Nottingham",
        "Diocese of Oxford",
        "Diocese of Peterborough",
        "Diocese of Plymouth",
        "Diocese of Portsmouth (ce)",
        "Diocese of Portsmouth (rc)",
        "Diocese of Ripon",
        "Diocese of Rochester",
        "Diocese of Salford",
        "Diocese of Salisbury",
        "Diocese of Sheffield",
        "Diocese of Shrewsbury",
        "Diocese of Shrewsbury/Diocese of Chester",
        "Diocese of Southwark",
        "Diocese of Southwell",
        "Diocese of St Albans",
        "Diocese of St Edmundsbury and Ipswich",
        "Diocese of Truro",
        "Diocese of Wakefield",
        "Diocese of Winchester",
        "Diocese of Worcester",
        "Diocese of York",
    ],
    "EBDName": [
        "PRU Does have EBD provision",
        "PRU Does not have EBD provision",
    ],
    "EdByOtherName": [
        "Does not offer tuition by another provider",
        "PRU does offer tuition by another provider",
    ],
    "EstablishmentStatusName": [
        "Closed",
        "Open",
        "Open, but proposed to close",
        "Proposed to open",
    ],
    "EstablishmentTypeGroupName": [
        "Academies",
        "Colleges",
        "Free Schools",
        "Independent schools",
        "Local authority maintained schools",
        "Other types",
        "Special schools",
        "Universities",
        "Welsh schools",
    ],
    "FTProvName": [
        "Does not offer full time provision",
        "PRU offers full time provision",
    ],
    "FederationFlagName": [
        "Not under a federation",
        "Supported by a federation",
    ],
    "FurtherEducationTypeName": [
        "Art, Design and Performing Arts College",
        "General Further Education College",
        "Land-Based College",
        "Sixth Form College (General)",
        "Sixth Form College (Voluntary Aided)",
        "Sixth Form College (Voluntary Controlled)",
        "Specialist Designated College",
        "Tertiary College",
    ],
    "GORCode": [
        "A",
        "B",
        "D",
        "E",
        "F",
        "G",
        "H",
        "J",
        "K",
        "W",
        "Z",
    ],
    "GORName": [
        "East Midlands",
        "East of England",
        "London",
        "North East",
        "North West",
        "Not Applicable",
        "South East",
        "South West",
        "Wales (pseudo)",
        "West Midlands",
        "Yorkshire and the Humber",
    ],
    "GSSLACodeName": [
        "E06000001",
        "E06000002",
        "E06000003",
        "E06000004",
        "E06000005",
        "E06000006",
        "E06000007",
        "E06000008",
        "E06000009",
        "E06000010",
        "E06000011",
        "E06000012",
        "E06000013",
        "E06000014",
        "E06000015",
        "E06000016",
        "E06000017",
        "E06000018",
        "E06000019",
        "E06000020",
        "E06000021",
        "E06000022",
        "E06000023",
        "E06000024",
        "E06000025",
        "E06000026",
        "E06000027",
        "E06000028",
        "E06000029",
        "E06000030",
        "E06000031",
        "E06000032",
        "E06000033",
        "E06000034",
        "E06000035",
        "E06000036",
        "E06000037",
        "E06000038",
        "E06000039",
        "E06000040",
        "E06000041",
        "E06000042",
        "E06000043",
        "E06000044",
        "E06000045",
        "E06000046",
        "E06000047",
        "E06000049",
        "E06000050",
        "E06000051",
        "E06000052",
        "E06000053",
        "E06000054",
        "E06000055",
        "E06000056",
        "E06000057",
        "E06000058",
        "E06000059",
        "E06000060",
        "E06000061",
        "E06000062",
        "E08000001",
        "E08000002",
        "E08000003",
        "E08000004",
        "E08000005",
        "E08000006",
        "E08000007",
        "E08000008",
        "E08000009",
        "E08000010",
        "E08000011",
        "E08000012",
        "E08000013",
        "E08000014",
        "E08000015",
        "E08000016",
        "E08000017",
        "E08000018",
        "E08000019",
        "E08000021",
        "E08000022",
        "E08000023",
        "E08000024",
        "E08000025",
        "E08000026",
        "E08000027",
        "E08000028",
        "E08000029",
        "E08000030",
        "E08000031",
        "E08000032",
        "E08000033",
        "E08000034",
        "E08000035",
        "E08000036",
        "E08000037",
        "E09000001",
        "E09000002",
        "E09000003",
        "E09000004",
        "E09000005",
        "E09000006",
        "E09000007",
        "E09000008",
        "E09000009",
        "E09000010",
        "E09000011",
        "E09000012",
        "E09000013",
        "E09000014",
        "E09000015",
        "E09000016",
        "E09000017",
        "E09000018",
        "E09000019",
        "E09000020",
        "E09000021",
        "E09000022",
        "E09000023",
        "E09000024",
        "E09000025",
        "E09000026",
        "E09000027",
        "E09000028",
        "E09000029",
        "E09000030",
        "E09000031",
        "E09000032",
        "E09000033",
        "E10000003",
        "E10000006",
        "E10000007",
        "E10000008",
        "E10000009",
        "E10000011",
        "E10000012",
        "E10000013",
        "E10000014",
        "E10000015",
        "E10000016",
        "E10000017",
        "E10000018",
        "E10000019",
        "E10000020",
        "E10000021",
        "E10000023",
        "E10000024",
        "E10000025",
        "E10000027",
        "E10000028",
        "E10000029",
        "E10000030",
        "E10000031",
        "E10000032",
        "E10000034",
        "W06000001",
        "W06000002",
        "W06000003",
        "W06000004",
        "W06000005",
        "W06000006",
        "W06000008",
        "W06000009",
        "W06000010",
        "W06000011",
        "W06000012",
        "W06000013",
        "W06000014",
        "W06000015",
        "W06000016",
        "W06000018",
        "W06000019",
        "W06000020",
        "W06000021",
        "W06000022",
        "W06000023",
        "W06000024",
        "X999999",
    ],
    "GenderName": [
        "Boys",
        "Girls",
        "Mixed",
    ],
    "HeadTitleName": [
        "Canon",
        "Co Headteacher",
        "Dr",
        "Dame",
        "Dean",
        "Directors",
        "Doctor",
        "Father",
        "Headteacher",
        "Lady",
        "Lt Col",
        "Ms",
        "Manager",
        "Miss",
        "Mr",
        "Mrs",
        "Mufti",
        "Pastor",
        "Principal",
        "Professor",
        "Professor Sir",
        "Proprietor",
        "Rabbi",
        "Rev",
        "Revd",
        "Reverend",
        "Rt Hon",
        "Sir",
        "Sister",
        "The Revd",
        "The Reverend",
        "Wing Commander",
    ],
    "InspectorateNameName": [
        "Bridge Schools' Inspectorate",
        "ISI",
        "Ofsted",
        "SIS",
    ],
    "LaName": [
        "BFPO Overseas Establishments",
        "Barking and Dagenham",
        "Barnet",
        "Barnsley",
        "Bath and North East Somerset",
        "Bedford",
        "Bexley",
        "Birmingham",
        "Blackburn with Darwen",
        "Blackpool",
        "Blaenau Gwent",
        "Bolton",
        "Bournemouth, Christchurch and Poole",
        "Bracknell Forest",
        "Bradford",
        "Brent",
        "Bridgend",
        "Brighton and Hove",
        "Bristol, City of",
        "British Overseas Establishments",
        "Bromley",
        "Buckinghamshire",
        "Bury",
        "Caerphilly",
        "Calderdale",
        "Cambridgeshire",
        "Camden",
        "Cardiff",
        "Carmarthenshire",
        "Central Bedfordshire",
        "Ceredigion",
        "Cheshire East",
        "Cheshire West and Chester",
        "City of London",
        "Conwy",
        "Cornwall",
        "County Durham",
        "Coventry",
        "Croydon",
        "Cumbria",
        "Darlington",
        "Denbighshire",
        "Derby",
        "Derbyshire",
        "Devon",
        "Does not apply",
        "Doncaster",
        "Dorset",
        "Dudley",
        "Ealing",
        "East Riding of Yorkshire",
        "East Sussex",
        "Enfield",
        "Essex",
        "Fieldwork Overseas Establishments",
        "Flintshire",
        "Gateshead",
        "Gibraltar Overseas Establishments",
        "Gloucestershire",
        "Greenwich",
        "Guernsey Offshore Establishments",
        "Gwynedd",
        "Hackney",
        "Halton",
        "Hammersmith and Fulham",
        "Hampshire",
        "Haringey",
        "Harrow",
        "Hartlepool",
        "Havering",
        "Herefordshire, County of",
        "Hertfordshire",
        "Hillingdon",
        "Hounslow",
        "Isle of Anglesey",
        "Isle of Man Offshore Establishments",
        "Isle of Wight",
        "Isles Of Scilly",
        "Islington",
        "Jersey Offshore Establishments",
        "Kensington and Chelsea",
        "Kent",
        "Kingston upon Hull, City of",
        "Kingston upon Thames",
        "Kirklees",
        "Knowsley",
        "Lambeth",
        "Lancashire",
        "Leeds",
        "Leicester",
        "Leicestershire",
        "Lewisham",
        "Lincolnshire",
        "Liverpool",
        "Luton",
        "Manchester",
        "Medway",
        "Merthyr Tydfil",
        "Merton",
        "Middlesbrough",
        "Milton Keynes",
        "Monmouthshire",
        "Neath Port Talbot",
        "Newcastle upon Tyne",
        "Newham",
        "Newport",
        "Norfolk",
        "North East Lincolnshire",
        "North Lincolnshire",
        "North Northamptonshire",
        "North Somerset",
        "North Tyneside",
        "North Yorkshire",
        "Northumberland",
        "Nottingham",
        "Nottinghamshire",
        "Oldham",
        "Oxfordshire",
        "Pembrokeshire",
        "Peterborough",
        "Plymouth",
        "Portsmouth",
        "Powys",
        "Pre LGR (1996) Avon",
        "Pre LGR (1996) Cleveland",
        "Pre LGR (1996) Humberside",
        "Pre LGR (1996) North Yorkshire",
        "Pre LGR (1997) Bedfordshire",
        "Pre LGR (1997) Buckinghamshire",
        "Pre LGR (1997) Derbyshire",
        "Pre LGR (1997) Dorset",
        "Pre LGR (1997) Durham",
        "Pre LGR (1997) East Sussex",
        "Pre LGR (1997) Hampshire",
        "Pre LGR (1997) Leicestershire",
        "Pre LGR (1997) Staffordshire",
        "Pre LGR (1997) Wiltshire",
        "Pre LGR (1998) Berkshire",
        "Pre LGR (1998) Cambridgeshire",
        "Pre LGR (1998) Cheshire",
        "Pre LGR (1998) Devon",
        "Pre LGR (1998) Essex",
        "Pre LGR (1998) Hereford & Worcester",
        "Pre LGR (1998) Kent",
        "Pre LGR (1998) Lancashire",
        "Pre LGR (1998) Nottinghamshire",
        "Pre LGR (1998) Shropshire",
        "Pre LGR (2009) Bedfordshire",
        "Pre LGR (2009) Cheshire",
        "Pre-LGR 2019 Bournemouth",
        "Pre-LGR 2019 Dorset",
        "Pre-LGR 2019 Poole",
        "Pre-LGR 2021 Northamptonshire",
        "Reading",
        "Redbridge",
        "Redcar and Cleveland",
        "Rhondda Cynon Taf",
        "Richmond upon Thames",
        "Rochdale",
        "Rotherham",
        "Rutland",
        "Salford",
        "Sandwell",
        "Scotland Offshore Establishments",
        "Sefton",
        "Sheffield",
        "Shropshire",
        "Slough",
        "Solihull",
        "Somerset",
        "South Gloucestershire",
        "South Tyneside",
        "Southampton",
        "Southend-on-Sea",
        "Southwark",
        "St. Helens",
        "Staffordshire",
        "Stockport",
        "Stockton-on-Tees",
        "Stoke-on-Trent",
        "Suffolk",
        "Sunderland",
        "Surrey",
        "Sutton",
        "Swansea",
        "Swindon",
        "Tameside",
        "Telford and Wrekin",
        "Thurrock",
        "Torbay",
        "Torfaen",
        "Tower Hamlets",
        "Trafford",
        "Vale of Glamorgan",
        "Wakefield",
        "Walsall",
        "Waltham Forest",
        "Wandsworth",
        "Warrington",
        "Warwickshire",
        "West Berkshire",
        "West Northamptonshire",
        "West Sussex",
        "Westminster",
        "Wigan",
        "Wiltshire",
        "Windsor and Maidenhead",
        "Wirral",
        "Wokingham",
        "Wolverhampton",
        "Worcestershire",
        "Wrexham",
        "York",
    ],
    "NurseryProvisionName": [
        "Has Nursery Classes",
        "No Nursery Classes",
    ],
    "OfficialSixthFormName": [
        "Does not have a sixth form",
        "Has a sixth form",
    ],
    "OfstedRatingName": [
        "Good",
        "Inadequate",
        "Insufficient evidence",
        "Outstanding",
        "Requires improvement",
        "Serious Weaknesses",
        "Special Measures",
    ],
    "PhaseOfEducationName": [
        "All-through",
        "Middle deemed primary",
        "Middle deemed secondary",
        "Nursery",
        "Primary",
        "Secondary",
        "16 plus",
    ],
    "RSCRegionName": [
        "East Midlands and the Humber",
        "East of England and North-East London",
        "Lancashire and West Yorkshire",
        "North of England",
        "North-West London and South-Central England",
        "South-East England and South London",
        "South-West England",
        "West Midlands",
    ],
    "ReasonEstablishmentClosedName": [
        "Academy Converter",
        "Academy Free School",
        "Change in status",
        "Change Religious Character",
        "Close Nursery School",
        "Closure",
        "Created in Error - application rejected",
        "De-registered",
        "Does not meet criteria for registration",
        "For Academy",
        "Fresh Start",
        "Result of Amalgamation/Merger",
        "Transferred to new sponsor",
    ],
    "ReasonEstablishmentOpenedName": [
        "Academy Converter",
        "Academy Free School",
        "Change in status",
        "Change Religious Character",
        "Former Independent",
        "Free Special School",
        "Fresh Start",
        "New Nursery School",
        "New Provision",
        "Not Recorded",
        "Result of Amalgamation",
        "Result of Closure",
        "Split school",
    ],
    "ReligiousName": [
        "Anglican",
        "Anglican/Christian",
        "Anglican/Church of England",
        "Anglican/Evangelical",
        "Buddhist",
        "Catholic",
        "Charadi Jewish",
        "Christian",
        "Christian/Evangelical",
        "Christian/Methodist",
        "Christian/non-denominational",
        "Christian Science",
        "Church of England",
        "Church of England/Christian",
        "Church of England/Evangelical",
        "Church of England/Free Church",
        "Church of England/Methodist",
        "Church of England/Methodist/United Reform Church/Baptist",
        "Church of England/Roman Catholic",
        "Church of England/United Reformed Church",
        "Congregational Church",
        "Does not apply",
        "Free Church",
        "Greek Orthodox",
        "Hindu",
        "Inter- / non- denominational",
        "Islam",
        "Jewish",
        "Methodist",
        "Methodist/Church of England",
        "Moravian",
        "Multi-faith",
        "Muslim",
        "None",
        "Orthodox Jewish",
        "Plymouth Brethren Christian Church",
        "Protestant",
        "Protestant/Evangelical",
        "Quaker",
        "Reformed Baptist",
        "Roman Catholic",
        "Roman Catholic/Anglican",
        "Roman Catholic/Church of England",
        "Seventh Day Adventist",
        "Sikh",
        "Sunni Deobandi",
        "Unitarian",
        "United Reformed Church",
    ],
    "SenName": [
        "ASD - Autistic Spectrum Disorder",
        "HI - Hearing Impairment",
        "MLD - Moderate Learning Difficulty",
        "MSI - Multi-Sensory Impairment",
        "Not Applicable",
        "OTH - Other Difficulty/Disability",
        "PD - Physical Disability",
        "PMLD - Profound and Multiple Learning Difficulty",
        "SEMH - Social, Emotional and Mental Health",
        "SLCN - Speech, language and Communication",
        "SLD - Severe Learning Difficulty",
        "SpLD - Specific Learning Difficulty",
        "VI - Visual Impairment",
    ],
    "SENPRUName": [
        "PRU Does have Provision for SEN",
        "PRU Does not have Provision for SEN",
    ],
    "SchoolSponsorFlagName": [
        "-",
        "Linked to a sponsor",
    ],
    "Section41ApprovedName": [
        "Approved",
        "Not approved",
    ],
    "SpecialClassesName": [
        "Has Special Classes",
        "No Special Classes",
    ],
    "TeenMothName": [
        "Does not provide places for Teen Mothers",
        "Provides places for Teen Mothers",
    ],
    "TrustSchoolFlagName": [
        "Not supported by a trust",
        "Supported by a multi-academy trust",
        "Supported by a single-academy trust",
        "Supported by a trust",
    ],
    "TypeOfEstablishmentName": [
        "Academy 16-19 converter",
        "Academy 16 to 19 sponsor led",
        "Academy alternative provision converter",
        "Academy alternative provision sponsor led",
        "Academy converter",
        "Academy special converter",
        "Academy special sponsor led",
        "Academy sponsor led",
        "British schools overseas",
        "City technology college",
        "Community school",
        "Community special school",
        "Foundation school",
        "Foundation special school",
        "Free schools",
        "Free schools 16 to 19",
        "Free schools alternative provision",
        "Free schools special",
        "Further education",
        "Higher education institutions",
        "Institution funded by other government department",
        "Local authority nursery school",
        "Miscellaneous",
        "Non-maintained special school",
        "Offshore schools",
        "Other independent school",
        "Other independent special school",
        "Pupil referral unit",
        "Secure units",
        "Service children's education",
        "Sixth form centres",
        "Special post 16 institution",
        "Studio schools",
        "University technical college",
        "Voluntary aided school",
        "Voluntary controlled school",
        "Welsh establishment",
    ],
    "TypeOfResourcedProvisionName": [
        "Resourced provision",
        "Resourced provision and SEN unit",
        "SEN unit",
    ],
    "UrbanRuralCodeEnum": [
        "A1",
        "B1",
        "C1",
        "C2",
        "D1",
        "D2",
        "E1",
        "E2",
        "F1",
        "F2",
        "Z9",
    ],
};
